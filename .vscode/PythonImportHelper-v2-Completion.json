[
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "pyplot",
        "importPath": "matplotlib",
        "description": "matplotlib",
        "isExtraImport": true,
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "products",
        "kind": 5,
        "importPath": "Bar_Plot",
        "description": "Bar_Plot",
        "peekOfCode": "products = [\"Mouse\", \"Keyborad\", \"Laptop\", \"Mobile\", \"Headphone\"]\nprice = [101, 110, 103, 115, 100]\n#plt.bar(products, price)\n#plt.bar(products, price, color='red', width=0.5)\nplt.bar(products, price, color=['r', 'g', 'y'], width=0.5)\n#plt.barh(products, price, color=['r', 'g', 'y'])\nbars = plt.bar(products, price, color=['r', 'g', 'y'], width=0.5)\nplt.xlabel('Products')\nplt.ylabel('Price')\nplt.title('Products Bar Plot')",
        "detail": "Bar_Plot",
        "documentation": {}
    },
    {
        "label": "price",
        "kind": 5,
        "importPath": "Bar_Plot",
        "description": "Bar_Plot",
        "peekOfCode": "price = [101, 110, 103, 115, 100]\n#plt.bar(products, price)\n#plt.bar(products, price, color='red', width=0.5)\nplt.bar(products, price, color=['r', 'g', 'y'], width=0.5)\n#plt.barh(products, price, color=['r', 'g', 'y'])\nbars = plt.bar(products, price, color=['r', 'g', 'y'], width=0.5)\nplt.xlabel('Products')\nplt.ylabel('Price')\nplt.title('Products Bar Plot')\nplt.grid(axis='x', linestyle='--')",
        "detail": "Bar_Plot",
        "documentation": {}
    },
    {
        "label": "bars",
        "kind": 5,
        "importPath": "Bar_Plot",
        "description": "Bar_Plot",
        "peekOfCode": "bars = plt.bar(products, price, color=['r', 'g', 'y'], width=0.5)\nplt.xlabel('Products')\nplt.ylabel('Price')\nplt.title('Products Bar Plot')\nplt.grid(axis='x', linestyle='--')\nplt.grid(axis='y', linestyle=':')\n# Add value labels on top of each bar\nfor bar in bars:\n    yval = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2, yval, round(yval, 2), ha='center', va='bottom', fontsize=15)",
        "detail": "Bar_Plot",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Histogram",
        "description": "Histogram",
        "peekOfCode": "data = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]\n#plt.hist(data, bins=5, orientation='vertical')\nplt.hist(data, bins=5, orientation='vertical', color='skyblue', edgecolor='black')\nplt.xlabel('Value')\nplt.ylabel('Frequency')\nplt.title('Basic Histogram')\nplt.show()",
        "detail": "Histogram",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "histogram_with_density_plot",
        "description": "histogram_with_density_plot",
        "peekOfCode": "data = np.random.randn(10000)\n# Create histogram with density plot\nplt.hist(data, bins=30, density=True, alpha=0.6, color='g')\n# Add density plot\ndensity = np.linspace(min(data), max(data), 100)\nplt.plot(density, 1/(np.sqrt(2 * np.pi)) * np.exp(-0.5 * density**2), color='r')\nplt.xlabel('Value')\nplt.ylabel('Density')\nplt.title('Histogram with Density Plot')\nplt.show()",
        "detail": "histogram_with_density_plot",
        "documentation": {}
    },
    {
        "label": "density",
        "kind": 5,
        "importPath": "histogram_with_density_plot",
        "description": "histogram_with_density_plot",
        "peekOfCode": "density = np.linspace(min(data), max(data), 100)\nplt.plot(density, 1/(np.sqrt(2 * np.pi)) * np.exp(-0.5 * density**2), color='r')\nplt.xlabel('Value')\nplt.ylabel('Density')\nplt.title('Histogram with Density Plot')\nplt.show()",
        "detail": "histogram_with_density_plot",
        "documentation": {}
    },
    {
        "label": "products",
        "kind": 5,
        "importPath": "Line_Plot",
        "description": "Line_Plot",
        "peekOfCode": "products = [\"Mouse\", \"Keyborad\", \"Laptop\", \"Mobile\", \"Headphone\"]\nprice = [101, 110, 103, 115, 100]\nplt.plot(products, price)\nplt.plot(products, price, color='red', linestyle='--', linewidth=2)\nplt.plot(products, price, marker='o', markersize=20, markerfacecolor='red')\nplt.xlabel('Products')\nplt.ylabel('Price')\nplt.title('Products Line Plot')\nplt.grid(True)\nplt.grid(color='gray', linestyle=':')",
        "detail": "Line_Plot",
        "documentation": {}
    },
    {
        "label": "price",
        "kind": 5,
        "importPath": "Line_Plot",
        "description": "Line_Plot",
        "peekOfCode": "price = [101, 110, 103, 115, 100]\nplt.plot(products, price)\nplt.plot(products, price, color='red', linestyle='--', linewidth=2)\nplt.plot(products, price, marker='o', markersize=20, markerfacecolor='red')\nplt.xlabel('Products')\nplt.ylabel('Price')\nplt.title('Products Line Plot')\nplt.grid(True)\nplt.grid(color='gray', linestyle=':')\nplt.show()",
        "detail": "Line_Plot",
        "documentation": {}
    },
    {
        "label": "products",
        "kind": 5,
        "importPath": "multiple_bars",
        "description": "multiple_bars",
        "peekOfCode": "products = [\"Mouse\", \"Keyborad\", \"Laptop\", \"Mobile\", \"Headphone\"]\nprice = [101, 110, 103, 115, 100]\nquantity=[30, 60, 40, 80, 90]\nwidth=0.3\nproducts_index = np.arange(len(products))\nproducts_index_set = [j+width for j in products_index]\nplt.bar(products_index, price, color='red', width=width, label='Price')\nplt.bar(products_index_set, quantity, color='blue', width=width, label='Quantity')\nplt.xticks(products_index+width/2, products, rotation=20)\nplt.legend()",
        "detail": "multiple_bars",
        "documentation": {}
    },
    {
        "label": "price",
        "kind": 5,
        "importPath": "multiple_bars",
        "description": "multiple_bars",
        "peekOfCode": "price = [101, 110, 103, 115, 100]\nquantity=[30, 60, 40, 80, 90]\nwidth=0.3\nproducts_index = np.arange(len(products))\nproducts_index_set = [j+width for j in products_index]\nplt.bar(products_index, price, color='red', width=width, label='Price')\nplt.bar(products_index_set, quantity, color='blue', width=width, label='Quantity')\nplt.xticks(products_index+width/2, products, rotation=20)\nplt.legend()\nplt.show()",
        "detail": "multiple_bars",
        "documentation": {}
    },
    {
        "label": "products_index",
        "kind": 5,
        "importPath": "multiple_bars",
        "description": "multiple_bars",
        "peekOfCode": "products_index = np.arange(len(products))\nproducts_index_set = [j+width for j in products_index]\nplt.bar(products_index, price, color='red', width=width, label='Price')\nplt.bar(products_index_set, quantity, color='blue', width=width, label='Quantity')\nplt.xticks(products_index+width/2, products, rotation=20)\nplt.legend()\nplt.show()",
        "detail": "multiple_bars",
        "documentation": {}
    },
    {
        "label": "products_index_set",
        "kind": 5,
        "importPath": "multiple_bars",
        "description": "multiple_bars",
        "peekOfCode": "products_index_set = [j+width for j in products_index]\nplt.bar(products_index, price, color='red', width=width, label='Price')\nplt.bar(products_index_set, quantity, color='blue', width=width, label='Quantity')\nplt.xticks(products_index+width/2, products, rotation=20)\nplt.legend()\nplt.show()",
        "detail": "multiple_bars",
        "documentation": {}
    },
    {
        "label": "data1",
        "kind": 5,
        "importPath": "Multiple_Histograms",
        "description": "Multiple_Histograms",
        "peekOfCode": "data1 = np.random.randn(1000)\ndata2 = np.random.randn(1000) + 2\nplt.hist(data1, bins=30, alpha=0.5, label='Data 1')\nplt.hist(data2, bins=30, alpha=0.5, label='Data 2')\nplt.xlabel('Value')\nplt.ylabel('Frequency')\nplt.title('Multiple Histograms')\nplt.legend()\nplt.show()",
        "detail": "Multiple_Histograms",
        "documentation": {}
    },
    {
        "label": "data2",
        "kind": 5,
        "importPath": "Multiple_Histograms",
        "description": "Multiple_Histograms",
        "peekOfCode": "data2 = np.random.randn(1000) + 2\nplt.hist(data1, bins=30, alpha=0.5, label='Data 1')\nplt.hist(data2, bins=30, alpha=0.5, label='Data 2')\nplt.xlabel('Value')\nplt.ylabel('Frequency')\nplt.title('Multiple Histograms')\nplt.legend()\nplt.show()",
        "detail": "Multiple_Histograms",
        "documentation": {}
    },
    {
        "label": "products",
        "kind": 5,
        "importPath": "Multiple_Line_Plot",
        "description": "Multiple_Line_Plot",
        "peekOfCode": "products = [\"Mouse\", \"Keyborad\", \"Laptop\", \"Mobile\", \"Headphone\"]\nprice = [101, 110, 103, 115, 100]\nquantity=[30, 60, 40, 80, 90]\nplt.plot(products, price, label='Price')\nplt.plot(products, quantity, label='Quantity', linestyle='--')\nplt.legend()\nplt.show()",
        "detail": "Multiple_Line_Plot",
        "documentation": {}
    },
    {
        "label": "price",
        "kind": 5,
        "importPath": "Multiple_Line_Plot",
        "description": "Multiple_Line_Plot",
        "peekOfCode": "price = [101, 110, 103, 115, 100]\nquantity=[30, 60, 40, 80, 90]\nplt.plot(products, price, label='Price')\nplt.plot(products, quantity, label='Quantity', linestyle='--')\nplt.legend()\nplt.show()",
        "detail": "Multiple_Line_Plot",
        "documentation": {}
    },
    {
        "label": "x1",
        "kind": 5,
        "importPath": "Multiple_Scatter_Plot",
        "description": "Multiple_Scatter_Plot",
        "peekOfCode": "x1 = [1, 2, 3, 4, 5]\ny1 = [10, 15, 13, 17, 20]\nx2 = [1, 2, 3, 4, 5]\ny2 = [20, 25, 23, 27, 30]\nplt.scatter(x1, y1, color='blue', label='Group 1')\nplt.scatter(x2, y2, color='red', label='Group 2')\nplt.legend()\nplt.xlabel('X-axis Label')\nplt.ylabel('Y-axis Label')\nplt.title('Multiple Scatter Plots')",
        "detail": "Multiple_Scatter_Plot",
        "documentation": {}
    },
    {
        "label": "y1",
        "kind": 5,
        "importPath": "Multiple_Scatter_Plot",
        "description": "Multiple_Scatter_Plot",
        "peekOfCode": "y1 = [10, 15, 13, 17, 20]\nx2 = [1, 2, 3, 4, 5]\ny2 = [20, 25, 23, 27, 30]\nplt.scatter(x1, y1, color='blue', label='Group 1')\nplt.scatter(x2, y2, color='red', label='Group 2')\nplt.legend()\nplt.xlabel('X-axis Label')\nplt.ylabel('Y-axis Label')\nplt.title('Multiple Scatter Plots')\nplt.show()",
        "detail": "Multiple_Scatter_Plot",
        "documentation": {}
    },
    {
        "label": "x2",
        "kind": 5,
        "importPath": "Multiple_Scatter_Plot",
        "description": "Multiple_Scatter_Plot",
        "peekOfCode": "x2 = [1, 2, 3, 4, 5]\ny2 = [20, 25, 23, 27, 30]\nplt.scatter(x1, y1, color='blue', label='Group 1')\nplt.scatter(x2, y2, color='red', label='Group 2')\nplt.legend()\nplt.xlabel('X-axis Label')\nplt.ylabel('Y-axis Label')\nplt.title('Multiple Scatter Plots')\nplt.show()",
        "detail": "Multiple_Scatter_Plot",
        "documentation": {}
    },
    {
        "label": "y2",
        "kind": 5,
        "importPath": "Multiple_Scatter_Plot",
        "description": "Multiple_Scatter_Plot",
        "peekOfCode": "y2 = [20, 25, 23, 27, 30]\nplt.scatter(x1, y1, color='blue', label='Group 1')\nplt.scatter(x2, y2, color='red', label='Group 2')\nplt.legend()\nplt.xlabel('X-axis Label')\nplt.ylabel('Y-axis Label')\nplt.title('Multiple Scatter Plots')\nplt.show()",
        "detail": "Multiple_Scatter_Plot",
        "documentation": {}
    },
    {
        "label": "labels",
        "kind": 5,
        "importPath": "Pie_Chart",
        "description": "Pie_Chart",
        "peekOfCode": "labels = ['Mouse', 'Keyboard', 'Laptop', 'Mobile', 'Headphone']\nsizes = [30, 60, 40, 80, 90]\ncolors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'lightgreen']\nexplode = (0, 0.1, 0, 0, 0)\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140, explode=explode, shadow=True)\nplt.title('Basic Pie Chart')\nplt.axis('equal')\nplt.legend(labels, loc='upper right')\nplt.show()",
        "detail": "Pie_Chart",
        "documentation": {}
    },
    {
        "label": "sizes",
        "kind": 5,
        "importPath": "Pie_Chart",
        "description": "Pie_Chart",
        "peekOfCode": "sizes = [30, 60, 40, 80, 90]\ncolors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'lightgreen']\nexplode = (0, 0.1, 0, 0, 0)\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140, explode=explode, shadow=True)\nplt.title('Basic Pie Chart')\nplt.axis('equal')\nplt.legend(labels, loc='upper right')\nplt.show()",
        "detail": "Pie_Chart",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "Pie_Chart",
        "description": "Pie_Chart",
        "peekOfCode": "colors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'lightgreen']\nexplode = (0, 0.1, 0, 0, 0)\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140, explode=explode, shadow=True)\nplt.title('Basic Pie Chart')\nplt.axis('equal')\nplt.legend(labels, loc='upper right')\nplt.show()",
        "detail": "Pie_Chart",
        "documentation": {}
    },
    {
        "label": "explode",
        "kind": 5,
        "importPath": "Pie_Chart",
        "description": "Pie_Chart",
        "peekOfCode": "explode = (0, 0.1, 0, 0, 0)\nplt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=140, explode=explode, shadow=True)\nplt.title('Basic Pie Chart')\nplt.axis('equal')\nplt.legend(labels, loc='upper right')\nplt.show()",
        "detail": "Pie_Chart",
        "documentation": {}
    },
    {
        "label": "products",
        "kind": 5,
        "importPath": "Saving_Figures",
        "description": "Saving_Figures",
        "peekOfCode": "products = [\"Mouse\", \"Keyborad\", \"Laptop\", \"Mobile\", \"Headphone\"]\nprice = [101, 110, 103, 115, 100]\nquantity=[30, 60, 40, 80, 90]\nplt.plot(products, price, label='Price')\nplt.plot(products, quantity, label='Quantity', linestyle='--')\nplt.legend()\nplt.savefig('1stplot.png')\nplt.show()",
        "detail": "Saving_Figures",
        "documentation": {}
    },
    {
        "label": "price",
        "kind": 5,
        "importPath": "Saving_Figures",
        "description": "Saving_Figures",
        "peekOfCode": "price = [101, 110, 103, 115, 100]\nquantity=[30, 60, 40, 80, 90]\nplt.plot(products, price, label='Price')\nplt.plot(products, quantity, label='Quantity', linestyle='--')\nplt.legend()\nplt.savefig('1stplot.png')\nplt.show()",
        "detail": "Saving_Figures",
        "documentation": {}
    },
    {
        "label": "products",
        "kind": 5,
        "importPath": "Scatter_Plot",
        "description": "Scatter_Plot",
        "peekOfCode": "products = [\"Mouse\", \"Keyborad\", \"Laptop\", \"Mobile\", \"Headphone\"]\nprice = [101, 110, 103, 115, 100]\n#plt.scatter(products, price)\nsizes = [20, 50, 80, 200, 500]  # Marker sizes\ncolors = ['red', 'green', 'blue', 'cyan', 'magenta']  # Marker colors\nplt.scatter(products, price, s=sizes, c=colors)\n# Annotate specific points\nfor i, txt in enumerate(['A', 'B', 'C', 'D', 'E']):\n    plt.annotate(txt, (products[i], price[i]))\nplt.show()",
        "detail": "Scatter_Plot",
        "documentation": {}
    },
    {
        "label": "price",
        "kind": 5,
        "importPath": "Scatter_Plot",
        "description": "Scatter_Plot",
        "peekOfCode": "price = [101, 110, 103, 115, 100]\n#plt.scatter(products, price)\nsizes = [20, 50, 80, 200, 500]  # Marker sizes\ncolors = ['red', 'green', 'blue', 'cyan', 'magenta']  # Marker colors\nplt.scatter(products, price, s=sizes, c=colors)\n# Annotate specific points\nfor i, txt in enumerate(['A', 'B', 'C', 'D', 'E']):\n    plt.annotate(txt, (products[i], price[i]))\nplt.show()",
        "detail": "Scatter_Plot",
        "documentation": {}
    },
    {
        "label": "sizes",
        "kind": 5,
        "importPath": "Scatter_Plot",
        "description": "Scatter_Plot",
        "peekOfCode": "sizes = [20, 50, 80, 200, 500]  # Marker sizes\ncolors = ['red', 'green', 'blue', 'cyan', 'magenta']  # Marker colors\nplt.scatter(products, price, s=sizes, c=colors)\n# Annotate specific points\nfor i, txt in enumerate(['A', 'B', 'C', 'D', 'E']):\n    plt.annotate(txt, (products[i], price[i]))\nplt.show()",
        "detail": "Scatter_Plot",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "Scatter_Plot",
        "description": "Scatter_Plot",
        "peekOfCode": "colors = ['red', 'green', 'blue', 'cyan', 'magenta']  # Marker colors\nplt.scatter(products, price, s=sizes, c=colors)\n# Annotate specific points\nfor i, txt in enumerate(['A', 'B', 'C', 'D', 'E']):\n    plt.annotate(txt, (products[i], price[i]))\nplt.show()",
        "detail": "Scatter_Plot",
        "documentation": {}
    },
    {
        "label": "products",
        "kind": 5,
        "importPath": "Subplot",
        "description": "Subplot",
        "peekOfCode": "products = [\"Mouse\", \"Keyborad\", \"Laptop\", \"Mobile\", \"Headphone\"]\nprice = [101, 110, 103, 115, 100]\nquantity=[30, 60, 40, 80, 90]\nplt.subplot(2, 1, 1)  #(rows, columns, index) - first subplot\nplt.plot(products, price, label='Price')\nplt.title('Price')\nplt.subplot(2, 1, 2)  #(rows, columns, index) - second subplot\nplt.plot(products, quantity, label='Quantity')\nplt.title('Quantity')\nplt.tight_layout()",
        "detail": "Subplot",
        "documentation": {}
    },
    {
        "label": "price",
        "kind": 5,
        "importPath": "Subplot",
        "description": "Subplot",
        "peekOfCode": "price = [101, 110, 103, 115, 100]\nquantity=[30, 60, 40, 80, 90]\nplt.subplot(2, 1, 1)  #(rows, columns, index) - first subplot\nplt.plot(products, price, label='Price')\nplt.title('Price')\nplt.subplot(2, 1, 2)  #(rows, columns, index) - second subplot\nplt.plot(products, quantity, label='Quantity')\nplt.title('Quantity')\nplt.tight_layout()\nplt.show()",
        "detail": "Subplot",
        "documentation": {}
    }
]